generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  idusuario Int      @id @default(autoincrement())
  dtcadast  DateTime @default(now())
  nome      String?  @db.VarChar(200)
  email     String?  @unique @db.VarChar(200)
  sexo      String?  @db.VarChar(40)
  nacionali String?  @db.VarChar(100)
  senha     String?  @db.VarChar(200)
  stusuario String?  @db.VarChar(10)
  tpusuario String?  @db.VarChar(10)
  cpf       String?  @db.VarChar(20)
  rg        String?  @db.VarChar(20)
  nrpassa   String?  @db.VarChar(20)
  nacional  String?  @db.VarChar(40)
  facebook  String?  @db.VarChar(255)
  twitter   String?  @db.VarChar(255)
  instagram String?  @db.VarChar(255)
  linkedin  String?  @db.VarChar(255)
  fotoPerfil String?
  fotoCapa   String?
  CDRESET   String?  @db.VarChar(6)
  idhost    Int?     @unique // Campo único para relação 1-1

  contatoHost ContatoHost? @relation(fields: [idhost], references: [idctt], onDelete: Cascade, onUpdate: Cascade)

  idavaliacao Int? // Referência ao ID da Avaliacao (opcional)

  // Relações bidirecionais com Avaliacao
  avaliacoesComoAvaliado  Avaliacao[] @relation("avaliado_relation")
  avaliacoesComoAvaliador Avaliacao[] @relation("avaliador_relation")

  // Relação biderecional com Match
  matches Match[] @relation("viajante_relation")

  @@index([idhost], name: "IDHOST_idx")
  @@map("USUARIO")
}

model ContatoHost {
  idctt     Int @id  @default(autoincrement())
  nmprop    String?  @db.VarChar(100)
  endereco  String?  @db.VarChar(100)
  numero    String?  @db.VarChar(10)
  complem   String?  @db.VarChar(100)
  cdestado  String?  @db.VarChar(100)
  cidade    String?  @db.VarChar(100)
  nrcep     String?  @db.VarChar(100)
  nrtel     String?  @db.VarChar(100)
  tipoProp  String?  @db.VarChar(40)
  email     String?  @db.VarChar(100)
  latitude  Float?
  longitude Float?
  stcadast  String?  @db.VarChar(10)
  dtcadast  DateTime @default(now())

  usuario Usuario? @relation
  
  intercambio Intercambio[]

  @@map("CONTATO_HOST")
}

model Intercambio {
  idinterc   Int    @id @default(autoincrement())
  nmlocal    String @db.VarChar(150)
  titulo     String @db.VarChar(200)
  descricao  String @db.LongText
  servicos   String @db.VarChar(250)
  beneficios String @db.VarChar(250)
  duracao    String @db.VarChar(100)
  img1       String  // Alterado para String
  img2       String? // Alterado para String
  img3       String? // Alterado para String
  img4       String? // Alterado para String
  img5       String? // Alterado para String
  img6       String? // Alterado para String
  img7       String? // Alterado para String
  img8       String? // Alterado para String
  img9       String? // Alterado para String
  img10      String? // Alterado para String
  idhost     Int

  contatoHost ContatoHost @relation(fields: [idhost], references: [idctt], onDelete: Cascade, onUpdate: Cascade)
  
  matches Match[] @relation("iterc_relation")

  @@index([idhost], name: "IDHOST_idx")
  @@map("INTERCAMBIOS")
}

model Avaliacao {
  idavaliacao Int      @id @default(autoincrement())
  avaliadoId  Int
  avaliadorId Int
  avaliacao   Int      @default(0) // Nota da avaliação (ex: 1 a 5)
  snaval      Boolean? // Sim ou não para algo
  descricao   String?   @db.Text
  dtaval      DateTime? @db.Timestamp(6)
  dtcadast    DateTime @default(now())

  avaliado  Usuario @relation("avaliado_relation" , fields: [avaliadoId] , references: [idusuario], onDelete: Cascade)
  avaliador Usuario @relation("avaliador_relation", fields: [avaliadorId], references: [idusuario], onDelete: Cascade)

  @@map("AVALIACAO")
}

model Match {
  idmatch    Int      @id @default(autoincrement())
  idviajante Int 
  idinterc   Int 
  dtcria     DateTime @default(now())
  
  viajante Usuario     @relation("viajante_relation", fields: [idviajante], references: [idusuario], onDelete: Cascade)
  iterc    Intercambio @relation("iterc_relation"   , fields: [idinterc]  , references: [idinterc] , onDelete: Cascade)
  
  @@map("MATCH")
}